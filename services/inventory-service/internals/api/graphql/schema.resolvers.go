package graphql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.75

import (
	"context"
	"errors"
	"fmt"
	"inventory-service/internals/api/graphql/generated"
	graphqlmodels "inventory-service/internals/api/graphql/models"
	"inventory-service/internals/databases"
	dbmodels "inventory-service/internals/databases/models"
	"strconv"

	"gorm.io/gorm"
)

// InsertProduct is the resolver for the insertProduct field.
func (r *mutationResolver) InsertProduct(ctx context.Context, input graphqlmodels.NewProduct) (*graphqlmodels.Product, error) {
	dbProduct := &dbmodels.Product{
		Name:        input.Name,
		Price:       input.Price,
		Description: input.Description,
		Stock:       input.Stock,
		Category:    input.Category,
	}

	if result := databases.Db.Create(dbProduct); result.Error != nil {
		return nil, result.Error
	}

	return &graphqlmodels.Product{
		ID:          strconv.FormatUint(uint64(dbProduct.ID), 10),
		Name:        dbProduct.Name,
		Price:       dbProduct.Price,
		Description: dbProduct.Description,
		Stock:       dbProduct.Stock,
		Category:    dbProduct.Category,
	}, nil
}

// UpdateProduct is the resolver for the updateProduct field.
func (r *mutationResolver) UpdateProduct(ctx context.Context, id string, input graphqlmodels.UpdateProduct) (*graphqlmodels.Product, error) {
	productID, err := strconv.ParseUint(id, 10, 64)
	if err != nil {
		return nil, fmt.Errorf("invalid product ID: %w", err)
	}

	var dbProduct dbmodels.Product
	if result := databases.Db.First(&dbProduct, productID); result.Error != nil {
		return nil, result.Error
	}

	if input.Name != nil {
		dbProduct.Name = *input.Name
	}
	if input.Price != nil {
		dbProduct.Price = *input.Price
	}
	if input.Description != nil {
		dbProduct.Description = *input.Description
	}
	if input.Stock != nil {
		dbProduct.Stock = *input.Stock
	}
	if input.Category != nil {
		dbProduct.Category = *input.Category
	}

	if result := databases.Db.Save(&dbProduct); result.Error != nil {
		return nil, result.Error
	}

	return &graphqlmodels.Product{
		ID:          strconv.FormatUint(uint64(dbProduct.ID), 10),
		Name:        dbProduct.Name,
		Price:       dbProduct.Price,
		Description: dbProduct.Description,
		Stock:       dbProduct.Stock,
		Category:    dbProduct.Category,
	}, nil
}

// DeleteProduct is the resolver for the deleteProduct field.
func (r *mutationResolver) DeleteProduct(ctx context.Context, id string) (*graphqlmodels.Product, error) {
	productID, err := strconv.ParseUint(id, 10, 64)
	if err != nil {
		return nil, fmt.Errorf("invalid product ID: %w", err)
	}

	var dbProduct dbmodels.Product
	if result := databases.Db.First(&dbProduct, productID); result.Error != nil {
		return nil, result.Error
	}

	if result := databases.Db.Delete(&dbProduct); result.Error != nil {
		return nil, result.Error
	}

	return &graphqlmodels.Product{
		ID:          strconv.FormatUint(uint64(dbProduct.ID), 10),
		Name:        dbProduct.Name,
		Price:       dbProduct.Price,
		Description: dbProduct.Description,
		Stock:       dbProduct.Stock,
		Category:    dbProduct.Category,
	}, nil
}

// Products is the resolver for the products field.
func (r *queryResolver) Products(ctx context.Context) ([]*graphqlmodels.Product, error) {
	var dbProducts []dbmodels.Product
	if result := databases.Db.Find(&dbProducts); result.Error != nil {
		return nil, result.Error
	}

	var gqlProducts []*graphqlmodels.Product
	for _, p := range dbProducts {
		gqlProducts = append(gqlProducts, &graphqlmodels.Product{
			ID:          strconv.FormatUint(uint64(p.ID), 10),
			Name:        p.Name,
			Price:       p.Price,
			Description: p.Description,
			Stock:       p.Stock,
			Category:    p.Category,
	})
	}

	return gqlProducts, nil
}

// Product is the resolver for the product field.
func (r *queryResolver) Product(ctx context.Context, id string) (*graphqlmodels.Product, error) {
	productID, err := strconv.ParseUint(id, 10, 64)
	if err != nil {
		return nil, fmt.Errorf("invalid product ID: %w", err)
	}

	var dbProduct dbmodels.Product
	if result := databases.Db.First(&dbProduct, productID); result.Error != nil {
		if errors.Is(result.Error, gorm.ErrRecordNotFound) {
			return nil, nil // Return null if product not found
		}
		return nil, result.Error
	}

	return &graphqlmodels.Product{
		ID:          strconv.FormatUint(uint64(dbProduct.ID), 10),
		Name:        dbProduct.Name,
		Price:       dbProduct.Price,
		Description: dbProduct.Description,
		Stock:       dbProduct.Stock,
		Category:    dbProduct.Category,
	}, nil
}

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
